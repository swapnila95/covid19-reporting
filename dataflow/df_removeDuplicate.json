{
	"name": "df_removeDuplicate",
	"properties": {
		"folder": {
			"name": "WafaStudiesScenario"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_SalesInput",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_SalesInput",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_salesOutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "unionTheSources"
				},
				{
					"name": "pickTheDuplicateRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          saleDate as string,",
				"          salesItem as string,",
				"          country as string,",
				"          quantity as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          saleDate as string,",
				"          salesItem as string,",
				"          country as string,",
				"          quantity as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 union(byName: true)~> unionTheSources",
				"unionTheSources aggregate(groupBy(salesItem),",
				"     each(match(name != 'salesItem'), $$ = first($$))) ~> pickTheDuplicateRows",
				"pickTheDuplicateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}